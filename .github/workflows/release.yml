name: Release

on:
  push:
    tags:
      - 'v*'

permissions:
  contents: write
  packages: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    name: Create Release
    outputs:
      release-tag: ${{ steps.tag.outputs.tag }}
      release-version: ${{ steps.tag.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get tag info
        id: tag
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          VERSION=${TAG#v}
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Generate changelog
        id: changelog
        uses: requarks/changelog-action@v1
        with:
          token: ${{ github.token }}
          tag: ${{ steps.tag.outputs.tag }}

      - name: Create Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ steps.tag.outputs.tag }}
          name: Release ${{ steps.tag.outputs.tag }}
          body: ${{ steps.changelog.outputs.changes }}
          draft: false
          prerelease: ${{ contains(steps.tag.outputs.tag, '-') }}

  publish-npm:
    runs-on: ubuntu-latest
    needs: create-release
    name: Publish to NPM
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          registry-url: 'https://registry.npmjs.org'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Run tests
        run: npm test

      - name: Update version in package.json
        run: |
          VERSION=${{ needs.create-release.outputs.version }}
          npm version $VERSION --no-git-tag-version

      - name: Publish to NPM
        run: npm publish --access public
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

  publish-github-package:
    runs-on: ubuntu-latest
    needs: create-release
    name: Publish to GitHub Packages
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Run tests
        run: npm test

      - name: Update version in package.json
        run: |
          VERSION=${{ needs.create-release.outputs.version }}
          npm version $VERSION --no-git-tag-version

      - name: Scope package for GitHub Packages
        run: |
          OWNER=$(echo "${GITHUB_REPOSITORY_OWNER}" | tr '[:upper:]' '[:lower:]')
          npm pkg set name="@${OWNER}/screeps-api-mcp"

      - name: Configure npm authentication
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: echo "//npm.pkg.github.com/:_authToken=${NODE_AUTH_TOKEN}" >> ~/.npmrc

      - name: Publish to GitHub Packages
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npm publish --registry https://npm.pkg.github.com

  build-release-assets:
    runs-on: ubuntu-latest
    needs: create-release
    name: Build Release Assets
    strategy:
      matrix:
        os: [linux, darwin, win32]
        arch: [x64, arm64]
        exclude:
          - os: win32
            arch: arm64
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build project
        run: npm run build

      - name: Create standalone executable
        run: |
          # Install pkg globally for creating executables
          npm install -g pkg
          
          # Create package for specific platform
          PLATFORM="${{ matrix.os }}-${{ matrix.arch }}"
          OUTPUT_NAME="screeps-api-mcp-${{ needs.create-release.outputs.version }}-${PLATFORM}"
          
          if [ "${{ matrix.os }}" = "win32" ]; then
            OUTPUT_NAME="${OUTPUT_NAME}.exe"
          fi
          
          pkg dist/index.js --target node18-${{ matrix.os }}-${{ matrix.arch }} --output ${OUTPUT_NAME}
          
          # Create archive
          if [ "${{ matrix.os }}" = "win32" ]; then
            zip ${OUTPUT_NAME}.zip ${OUTPUT_NAME}
            echo "ASSET_NAME=${OUTPUT_NAME}.zip" >> $GITHUB_ENV
          else
            tar -czf ${OUTPUT_NAME}.tar.gz ${OUTPUT_NAME}
            echo "ASSET_NAME=${OUTPUT_NAME}.tar.gz" >> $GITHUB_ENV
          fi

      - name: Upload release asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.ASSET_NAME }}
          asset_name: ${{ env.ASSET_NAME }}
          asset_content_type: application/octet-stream

  publish-docker-release:
    runs-on: ubuntu-latest
    needs: create-release
    name: Publish Docker Release
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository }}
          tags: |
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=semver,pattern={{major}}
            type=raw,value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: |
            ${{ steps.meta.outputs.labels }}
            org.opencontainers.image.title=screeps-api-mcp
            org.opencontainers.image.description=Model Context Protocol server for Screeps game API access
            org.opencontainers.image.version=${{ needs.create-release.outputs.version }}
          cache-from: type=gha
          cache-to: type=gha,mode=max